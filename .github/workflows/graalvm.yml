name: GraalVM Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
# reformat:
#   # The type of runner that the job will run on
#   runs-on: ubuntu-latest
#
#   # Steps represent a sequence of tasks that will be executed as part of the job
#   steps:
#     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#     - uses: actions/checkout@v2
#
#     - name: Google Java Format
#       # You may pin to the exact commit or the version.
#       # uses: axel-op/googlejavaformat-action@5045c8c244a22eb6a28eeb6050cc2baebd75c5f2
#       uses: axel-op/googlejavaformat-action@3.5.0
#       with:
#         # Arguments for the Google Java Format executable
#         args: --replace --aosp # optional, default is --replace
#         # Pattern to match files to be formatted
#         #files: # optional, default is **/*.java
#         # Set to true to not commit the changes
#         skipCommit: false # optional, default is false
#         # Version of Google Java Format to use
#         #version: # optional
#         # Recommended on MacOS machines
#         #githubToken: # optional
#         # Commit message
#         #commitMessage: # optional, default is Google Java Format

  releasedate:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Create release date
        id: read_release_date
        shell: bash
        run: |
          r=$(date "+%Y%m%d-%H%M%S")
          echo "::set-output name=RELEASE_BODY::$r"

  build:
    needs: releasedate
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        #os: [ubuntu-latest, macos-latest, windows-latest]
      max-parallel: 1      

    if: github.ref == 'refs/heads/master'
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJSON(job) }}
        run: echo "$JOB_CONTEXT"
#      - name: Dump jobs context
#        env:
#          JOBS_CONTEXT: ${{ toJSON(jobs) }}
#        run: echo "$JOBS_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJSON(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJSON(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - name: Setup GraalVM action
        # You may pin to the exact commit or the version.
        # uses: ayltai/setup-graalvm@eb0db9af1ceb6dadb398847c7e23fc3afa09c0d3
        uses: ayltai/setup-graalvm@master
        with:
          # The JDK version to be installed with GraalVM. E.g. 8, 11. See https://github.com/graalvm/graalvm-ce-builds/releases
          java-version: 11 # optional
          # The version of GraalVM to make available on PATH. E.g. 20.1.0, 19.3.2. See https://github.com/graalvm/graalvm-ce-builds/releases
          # Allineare la versione con pom.xml
          graalvm-version: 21.3.0
          # Install GraalVM Native Image
          native-image: true # optional

      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2

      - name: Windows msvc setup
        uses: ilammy/msvc-dev-cmd@v1.12.1
        if: ${{ matrix.os == 'windows-latest' }}

      - name: Windows msbuild setup
        uses: microsoft/setup-msbuild@v1
        if: ${{ matrix.os == 'windows-latest' }}

      - name: Call maven
        run: mvn --no-transfer-progress -B package --file pom.xml -DskipNativeVersion=false
        
      - name: Create release date
        if: ${{ matrix.os == 'windows-latest' }}
        id: read_release_win
        shell: bash
        run: |
          r=$(date "+%Y%m%d-%H%M%S")
          echo "::set-output name=RELEASE_BODY::$r"

      - name: Upload Windows Binaries to Release
        if: ${{ matrix.os == 'windows-latest' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: release/windows/${{ steps.read_release_win.outputs.RELEASE_BODY }}
          file: D:\a\SockRedirector\SockRedirector\target\sockredirector.exe
#         file: D:\a\SockRedirector\SockRedirector\target\sockredirector-2.0.2.exe
          asset_name: Sockredirector.exe
          body: |
            Windows release of ${{ steps.read_release_win.outputs.RELEASE_BODY }}

      - name: Create release date
        if: ${{ matrix.os == 'ubuntu-latest' }}
        id: read_release_linux
        shell: bash
        run: |
          r=$(date "+%Y%m%d-%H%M%S")
          echo "::set-output name=RELEASE_BODY::$r"

      - name: Upload Linux Binaries to Release
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: release/linux/${{ steps.read_release_linux.outputs.RELEASE_BODY }}
          file: /home/runner/work/SockRedirector/SockRedirector/target/Sockredirector
          asset_name: Sockredirector
          body: |
            Linux release of ${{ steps.read_release_linux.outputs.RELEASE_BODY }}

      - name: Create release date
        if: ${{ matrix.os == 'macos-latest' }}
        id: read_release_mac
        shell: bash
        run: |
          r=$(date "+%Y%m%d-%H%M%S")
          echo "::set-output name=RELEASE_BODY::$r"

      - name: Upload Mac Binaries to Release
        if: ${{ matrix.os == 'macos-latest' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: release/mac/${{ steps.read_release_mac.outputs.RELEASE_BODY }}
          file: /Users/runner/work/SockRedirector/SockRedirector/target/Sockredirector
          asset_name: Sockredirector
          body: |
            MacOS release of ${{ steps.read_release_mac.outputs.RELEASE_BODY }}

      - name: Adding markdown
        run: echo '### Summary' >> $GITHUB_STEP_SUMMARY


#     - name: Commit files
#       if: ${{ matrix.os == 'windows-latest' }}
#       run: |
#         dir D:\a\SockRedirector\SockRedirector\target\
#         copy D:\a\SockRedirector\SockRedirector\target\sockredirector.exe   D:\a\SockRedirector\SockRedirector\executable\windows
#         copy D:\a\SockRedirector\SockRedirector\target\sockredirector-*.exe D:\a\SockRedirector\SockRedirector\executable\windows
#         git config --local user.email "action@github.com"
#         git config --local user.name "GitHub Action"
#         git add *.exe
#         git commit -m "[Automated] Added Windows build files"
#         #git config --global pull.ff only
#         git pull
#
#     - name: Commit files
#       if: ${{ matrix.os == 'ubuntu-latest' }}
#       run: |
#         cp /home/runner/work/SockRedirector/SockRedirector/target/Sockredirector /home/runner/work/SockRedirector/SockRedirector/executable/linux/
#         git config --local user.email "action@github.com"
#         git config --local user.name "GitHub Action"
#         git add .
#         git commit -m "[Automated] Added Linux build files"
#         #git config --global pull.ff only
#         git pull
#
#     - name: Commit files
#       if: ${{ matrix.os == 'macos-latest' }}
#       run: |
#         cp /Users/runner/work/SockRedirector/SockRedirector/target/Sockredirector /Users/runner/work/SockRedirector/SockRedirector/executable/mac/
#         git config --local user.email "action@github.com"
#         git config --local user.name "GitHub Action"
#         git add .
#         git commit -m "[Automated] Added Mac build files"
#         #git config --global pull.ff only
#         git pull
#
#     - name: Push changes
#       uses: ad-m/github-push-action@master
#       with:
#         github_token: ${{ secrets.GITHUB_TOKEN }}
#         branch: ${{ github.ref }}
